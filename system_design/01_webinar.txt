-== [FLG] System design. Webinar0  2021-02-03 ==-
-------------------------------------------------


== https://github.com/twirl/The-API-Book/ @twirl aka Сергей Константинов

Ключевой вопрос, который вы должны задать себе четыре раза, выглядит так:
-------------------------
какую проблему мы решаем?
-------------------------
Задать его следует четыре раза с ударением на каждом из четырёх слов.

-------------------------
КАКУЮ проблему мы решаем?
-------------------------
Можем ли мы чётко описать, в какой ситуации гипотетическим потребителям-разработчикам нужен наш продукт?

-------------------------
Какую ПРОБЛЕМУ мы решаем?
-------------------------
А мы правда уверены, что описанная выше ситуация — проблема? Действительно ли кто-то готов платить
(в прямом и переносном смысле) за то, что ситуация будет как-то автоматизирована?

-------------------------
Какую проблему МЫ решаем?
-------------------------
Действительно ли решение этой проблемы находится в нашей компетенции?
Действительно ли мы находимся в той позиции, чтобы решить эту проблему?

-------------------------
Какую проблему мы РЕШАЕМ?
-------------------------
Правда ли, что решение, которое мы предлагаем, действительно решает проблему?
Не создаём ли мы на её месте другую проблему, более сложную?


** Погуглить, составить актуальную таблицу **
** Никому не верить на слово, использовать perf**

Latency Comparison Numbers (~2012)
----------------------------------
L1 cache reference                           0.5 ns
Branch mispredict                            5   ns
L2 cache reference                           7   ns                      14x L1 cache
Mutex lock/unlock                           25   ns
Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache
Compress 1K bytes with Zippy             3,000   ns        3 us          ??? Google
Send 1K bytes over 1 Gbps network       10,000   ns       10 us
Read 4K randomly from SSD*             150,000   ns      150 us          ~1GB/sec SSD
Read 1 MB sequentially from memory     250,000   ns      250 us
Round trip within same datacenter      500,000   ns      500 us
Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory
Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip
Read 1 MB sequentially from disk    20,000,000   ns   20,000 us   20 ms  80x memory, 20X SSD
Send packet CA->Netherlands->CA    150,000,000   ns  150,000 us  150 ms

Notes
-----
1 ns = 10^-9 seconds
1 us = 10^-6 seconds = 1,000 ns
1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns

Credit
------
By Jeff Dean:               http://research.google.com/people/jeff/
Originally by Peter Norvig: http://norvig.com/21-days.html#answers

Contributions
-------------
'Humanized' comparison:  https://gist.github.com/hellerbarde/2843375
Visual comparison chart: http://i.imgur.com/k0t1e.png


Example

Задача про объединение списков?
Как она появилась исторически?
Сколько стоит чтение с диска? При чем тут дефрагментация?

- Посчитать сколько времени займет мердж двух отсортированных текстовых файлов по 1Tb?
  при использовании 1Gb Ram на одном ядре? HDD А какой  ? dd ? blocksize = 64MB ?? 4kB vs 512MB
- Посчитать сколько времени займет мердж 100 файлов по 10gb при использовании 1Gb Ram на одном ядре? SSD Seek Page
- Сколько времени займет сортировка файла 1Gb в памяти? RAM

FileA.txt               FileB.txt           FileC.txt
bar\n                   fuzz\n
foo\n                   gear\n
juzz\n
...                     ...




Что нам стоит CRUD построить? Пример дизайна публичной библиотеки. С чего начать?

Бизнес требования

Роль:
Читатель
Библиотекарь

Сущности
-Книга
-Пользователь
-Автор
-Склад

UserStories
Кто что делает с чем?

Читеатель получает книгу
Читатель возвращает книгу
Читатель продляет книгу

Для жителей одного города
Одна физическая библиотека

100 находятся в 20 городах

Функциональные требования
Пользователей 10000
Книги 20000
Авторы 10000

Нагрузка
DAU 100
API 1000 rps

(Монолит) API (транспорт, сериализация/десериализация, валидация) TransportLayer
ServiceLayer - классы и методы которые реализуют бизнес логику class LibraryManger;
Models - BookStorage.GetBooksCount();
Entity/ User.save, load,
Data
DB

Db Schema


Итерфейсы -> ApiGateWay

GET  /api/v1/library/users
GET  /api/v1/library/user?id=
POST /api/v1/library/user

REST, HTTP, Swagger, OpenApi 3.0

/api/v1/library/books
/api/v1/library/authors


Фаулер. Шаблоны корпоративных приложений

MVC -> DAO/DTO
